/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 13.04.2 ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
file_search_maxima:["C:/Users/James/maxima/$$$.{mac,mc}","C:\PROGRA~2\MAXIMA~1.2/share/maxima/5.31.2/share/$$$.{mac,mc}",
"C:\PROGRA~2\MAXIMA~1.2/share/maxima/5.31.2/share/{affine,algebra,algebra/charsets,algebra/solver,amatrix,bernstein,calculus,cobyla,cobyla/ex,cobyla/lisp,colnew,colnew/ex1,colnew/ex2,colnew/ex3,colnew/ex4,colnew/lisp,combinatorics,contrib,contrib/Grobner,contrib/Zeilberger,contrib/altsimp,contrib/bitwise,contrib/boolsimp,contrib/diffequations,contrib/diffequations/tests,contrib/format,contrib/fresnel,contrib/gentran,contrib/gentran/man,contrib/gentran/test,contrib/gf,contrib/integration,contrib/levin,contrib/lurkmathml,contrib/maximaMathML,contrib/mcclim,contrib/namespaces,contrib/noninteractive,contrib/prim,contrib/rand,contrib/rkf45,contrib/sarag,contrib/state,contrib/unit,contrib/vector3d,descriptive,diff_form,diffequations,distrib,draw,dynamics,ezunits,finance,fourier_elim,fractals,graphs,hypergeometric,integequations,integer_sequence,integration,lapack,lapack/blas,lapack/lapack,lbfgs,linearalgebra,lsquares,macro,matrix,minpack,minpack/lisp,misc,mnewton,multiadditive,numeric,numericalio,orthopoly,pdiff,physics,simplex,simplex/Tests,simplification,solve_rat_ineq,solve_rec,stats,stringproc,sym,tensor,to_poly_solve,trigonometry,utils,vector,z_transform}/$$$.{mac,mc}"
,"C:/Users/James/Documents/GitHub/Maxima/PostCode/$$$.{mac,mc}"];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
load(GetPositions);
load(SudokuMatrixGen);
load(CombMatrixGen);
load(NotPossibles);
load(GenAllPossValuesList);
load(GenNotPossValuesList);
load(SetValue);
load(GetValue);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* Generate a solution of specified size */
GenSolution(Size):=block([N:Size,SudokuMatrix,CombMatrix,AllPossValues,NotPossValues,BackTrack:0,Count:1,Positions,Possibles,NotPossibles,RandomValue],
    SudokuMatrix:SudokuMatrixGen(N),
    CombMatrix:CombMatrixGen(N),
    AllPossValues:GenAllPossValuesList(N),
    NotPossValues:GenNotPossValuesList(N),
Backtrack:0,
    while Count<=(Size^2) do (
        Positions:GetPositions(Count,N),
        Possibles:AllPossValues,
        NotPossibles:NotPossibles(Positions,SudokuMatrix,CombMatrix,NotPossValues[Count]),
        if ((length(NotPossibles))=Size) then (
            Backtrack:Backtrack+1,
            NotPossValuesList[Count]:[],
           SetValue(SudokuMatrix,SudokuMatrix,Positions,0),
            SetValue(CombMatrix,CombMatrix,Positions,0),
            Count:Count-1,
            Positions:GetPositions(Count,N),
            NotPossValuesList[Count]:append(NotPossValuesList[Count],[GetValue(SudokuMatrix,SudokuMatrix,Positions)])
        )
        else(
            for i:1 thru length(NotPossibles) do (
                Possibles: delete(NotPossibles[i], Possibles)
            ),
            RandomValue: Possibles[1+random(length(Possibles))],
            SetValue(SudokuMatrix,SudokuMatrix,Positions,RandomValue),
           SetValue(CombMatrix,CombMatrix,Positions,RandomValue),
            Count:Count+1
        )
   ),
    ListA:list(Count,Positions,Possibles,NotPossibles,length(NotPossibles),SudokuMatrix,RandomValue,Backtrack),
    ListB:NotPossValues,
    SudokuMatrix
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
GenSolution(9);
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
