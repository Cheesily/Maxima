/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 13.04.2 ] */

/* [wxMaxima: input   start ] */
RemovingRandomGivens;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* Uses number of seconds since midnight January 1st 1900 to seed the random number generator */
set_random_state(make_random_state(absolute_real_time()))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* Sets the size of the puzzle which will have cells removed */
Size:4;
SqrtSize:sqrt(Size);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* Test matrices, to be removed */
TestMatrix1:matrix([1,2,3,4],[3,4,1,2],[2,3,4,1],[4,1,2,3])$
TestMatrix2:matrix([1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,1,2,3],[7,8,9,1,2,3,4,5,6],[2,3,4,5,6,7,8,9,1],[5,6,7,8,9,1,2,3,4],
[8,9,1,2,3,4,5,6,7],[3,4,5,6,7,8,9,1,2],[6,7,8,9,1,2,3,4,5],[9,1,2,3,4,5,6,7,8])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
InputMComb:TestMatrix1;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* Generates a matrix of matrices equivalent to a Sudoku grid */
Count:0$
GridGen: (
for i from 1 thru SqrtSize do (
for j from 1 thru SqrtSize do (
Count: Count + 1, 
IM[i,j]: genmatrix(concat(B,Count), SqrtSize, SqrtSize)
)))$
InputM: genmatrix(IM, SqrtSize, SqrtSize)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* Copies the large input matrix to the matrices generated above */
for h from 1 thru Size^2 do (
i:1+quotient(h-1,SqrtSize^3),
j:1+quotient(mod(h-1,SqrtSize^3),Size),
k:1+quotient(mod(h-1,Size),SqrtSize),
l:1+mod(h-1,SqrtSize),
m:1+quotient(h-1,Size),
n:1+mod(h-1,Size),
InputM[i,j][k,l]:InputMComb[m,n]
)$
InputM;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* Creates a list of all cells which can be randomly selected */
ListOfRemCells:makelist()$
for i from 1 thru (Size^2) do(
TempList:[[i]],
ListOfRemCells:append(ListOfRemCells,TempList)
)$
ListOfRemCells;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
AllPossValues:makelist(i+1,i,0,Size-1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* Selects a cell position to be cleared, and removes this from the list */
x:1+random(length(ListOfRemCells));
y:ListOfRemCells[x][1];
ListOfremCells:delete(ListOfRemCells[x],ListOfRemCells);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* Calculates matrix indices to be used */
i:1+quotient(y-1,SqrtSize^3);
j:1+quotient(mod(y-1,SqrtSize^3),Size);
k:1+quotient(mod(y-1,Size),SqrtSize);
l:1+mod(y-1,SqrtSize);
m:1+quotient(y-1,Size);
n:1+mod(y-1,Size);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* Records value to be removed, and replaces the cell with 0 in both matrices */
RemovedValue:InputMComb[m,n];
InputMComb[m,n]:0$
InputMComb;
InputM[i,j][k,l]:0$
InputM;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* Creates a list of values which cannot go into the cleared cell */
block(
Temp: row(InputMComb, m),
Row: Temp[1],

Temp: col(InputMComb, n),
Temp: transpose(Temp),
Col: Temp[1],

Temp: row(InputM[i,j],1),
for p from 2 thru SqrtSize do(
TempRow: row(InputM[i,j],p),
Temp: addcol(Temp, TempRow)),
Box: Temp[1],

RowCol: append(Row, Col),
NotPossibles: append(RowCol, Box),
NotPossibles: sort(NotPossibles),
NotPossibles: unique(NotPossibles),
NotPossibles:delete(0,NotPossibles)
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Row;
Col;
Box;
NotPossibles;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* Tests if any other values can go in to the cleared cell, and if there are possible values, it creates a list of these */
if length(NotPossibles)!=(Size-1) then (
Possibles:copylist(AllPossValues),
Possibles: delete(RemovedValue, Possibles),
for p from 1 thru length(NotPossibles) do (
Possibles: delete(NotPossibles[p], Possibles)
),

/* For each possible value, tests if this leads to a valid solution */
block:(
for p from 1 thru length(possibles) do (
CheckForSolutionWithPInMN,
if CheckSolution:true then (
return
)
),
CheckSolution:false
));
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
