/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 13.04.2 ] */

/* [wxMaxima: input   start ] */
Size: 4;
SqrtSize: sqrt(Size);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Count:0$
GridGen: (for i from 1 thru SqrtSize do (
    for j from 1 thru SqrtSize do (
        Count: Count + 1, 
        LM[i,j]: genmatrix(concat(B,Count), SqrtSize, SqrtSize))
    )
)$
LargeM: genmatrix(LM, SqrtSize, SqrtSize);
B1B2: addcol(LM[1,1],[LM[1,2][1,1], LM[1,2][2,1]], [LM[1,2][1,2], LM[1,2][2,2]])$
B3B4: addcol(LM[2,1],[LM[2,2][1,1], LM[2,2][2,1]], [LM[2,2][1,2], LM[2,2][2,2]])$
LargeMComb: addrow(B1B2, row(B3B4,1), row(B3B4,2));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
AllPossValues: [1, 2, 3, 4]$
Possibles: AllPossValues;
Backtrack: false;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
SolutionGen:(
    for i from 1 thru 2 do (
        for j from 1 thru 2 do (
            for k from 1 thru 2 do (
                for l from 1 thru 2 do (
                block(
                    Start,
                    Possibles: AllPossValues,
                    Temp: row(LargeMComb, ((i^2)-i+k)),
                    Temp: Temp[1],
TempRow: Temp,
                    NotPossRow: rest(Temp,-(4-((j^2)-j+l)+1)),
                    Temp: col(LargeMComb, ((j^2)-j+l)),
                    Temp: transpose(Temp),
                    Temp: Temp[1],
TempCol: Temp,
                    NotPossCol: rest(Temp,-(4-((i^2)-i+k)+1)),
                    Temp: row(LM[i,j], 1),
                    Temp2: row(LM[i,j], 2),
                    Temp: addcol(Temp, Temp2),
                    Temp: Temp[1],
TempBox: Temp,
                    NotPossBox: rest(Temp, -(4-((k^2)-k+l)+1)),
                    NotPossRowCol: append(NotPossRow, NotPossCol),
                    NotPossibles: append(NotPossRowCol, NotPossBox),
                    NotPossibles: sort(NotPossibles),
                    NotPossibles: unique(NotPossibles),
TempPoss: Possibles,
                    if ((length(NotPossibles))=4) then (
                        Backtrack:true,
                        j:1,
                        k:1,
                        l:1,
                        go(Start)
                    )
                    else (
                    for m from 1 thru length(NotPossibles) do (
                            Possibles: delete(NotPossibles[m], Possibles))
                    )
                    ),
                    RandomValue: Possibles[1+random(length(Possibles))],
                    LM[i,j][k,l]: RandomValue,
                    B1B2: addcol(LM[1,1],[LM[1,2][1,1], LM[1,2][2,1]], [LM[1,2][1,2], LM[1,2][2,2]]),
                    B3B4: addcol(LM[2,1],[LM[2,2][1,1], LM[2,2][2,1]], [LM[2,2][1,2], LM[2,2][2,2]]),
                    LargeMComb: addrow(B1B2, row(B3B4,1), row(B3B4,2))
                )
            )
        )
    )
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
AllPossValues;
TempRow;
TempCol;
TempBox;
NotPossRow;
NotPossCol;
NotPossBox;
NotPossibles;
length(NotPossibles);
TempPoss;
Possibles;
LargeM;
B1B2;
B3B4;
LargeMComb;
Backtrack;
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
